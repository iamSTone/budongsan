result <- load("test.rda")
result
save
result
load("~/workspace/Budongsan/data/data.rda")
data
abc
abc
abc
abc <- null
abc <- NA
abc
abc
load("~/workspace/Budongsan/data/abc.rda")
abc
abc
data
name = "test"
assign(name, data)
name
test
save(test, "test.rda")
save(test, file = "test.rda")
test
test <- NA
test
load("test.rda")
test
first
excel_sheets(first)
excel_sheets("./data-raw/molit/monthly/201601.apt.rent.xls")
year
month
month = 2
pathPrefix = "data-raw/molit/monthly/"
year <- as.integer(year)
month <- as.integer(month)
month <- str_pad(month, 2, pad = "0")
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetPathes <- paste0(pathPrefix, sourceFiles[grepl(paste0("^", filePrefix), sourceFiles)])
targetPathes
targetPathes[1]
for(targetFile in targetPathes){
}
first <- targetPathes[1]
grepl(".apt,", first)
grepl(".apt.", first)
ifelse(grepl(".apt.", first), "아파트", "ㅆㄸㄴㅆ")
target <- first
type <- ifelse(grepl(".apt.", target), "아파트",
ifelse(grepl(".rh.", target), "연립/다세대",
ifelse(grepl(".sh.", target), "단독/다가구",
stop(paste(target, "is not supported file name."))
)
)
)
type
target
a <- data.frame(a = 1, b = 2)
a
b <- data.frame(c = 3, d = 3)
rbind(a, b)
rbind(data.table(a), data.table(b))
rbind(data.table(a), data.table(b), fill=R)
rbind(data.table(a), data.table(b), fill=T)
rbind(a, b, fill=T)
a
b
excel_sheets(target)
data
data$type <- "아파트"
ㅇㅁㅅㅁ
data
data$type
result <- read_excel(target, sheet = "서울특별시", skip = 7)
result
str(restul)
str(result)
molit.data.convertToData <- function(year, month, pathPrefix = "data-raw/molit/monthly/"){
year <- as.integer(year)
month <- as.integer(month)
if(year < 2016) stop(paste(year, "must be greater than 2016"))
if(month > 12) stop(paste(month, "must be less than 12"))
month <- str_pad(month, 2, pad = "0")
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetPathes <- paste0(pathPrefix, sourceFiles[grepl(paste0("^", filePrefix), sourceFiles)])
result <- data.table()
for(target in targetPathes){
type <- ifelse(grepl(".apt.", target), "아파트",
ifelse(grepl(".rh.", target), "연립/다세대",
ifelse(grepl(".sh.", target), "단독/다가구",
stop(paste(target, "is not supported file name."))
)
)
)
sheetNames <- excel_sheets(target)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(target, sheet = sheet, skip = 7))
sheetData$type <- type
result <- rbind(result, sheetData, fill=T)
}
}
result
}
result <- molit.data.convertToData(2016, 8)
result
result$타입 <- "안녕"
str(result)
result$주택유형
result[!is.na(result$주택유형)
]
result[!is.na(result$주택유형)]$주택유형
unique(result[!is.na(result$주택유형)]$주택유형
)
setwd("../myrealtrip/myrealtrip-report/")
library(budongsan)
?molit.rt.sh
molit.rt.sh
library(data.table)
molit.rt.sh
molit.rt.apt
data <- molit.rt.apt
data
colnames(data)
cn <- colnames(data)
cn
cn
cn
grepl(")&")
grepl(")$", cn)
cn[grepl(")$", cn)]
grepl("(w+)$", cn)
grepl(")$", cn)
grepl("(.*)$", cn)
grepl("(.*?)$", cn)
grepl("((.*?))$", cn)
grepl("\((.*?)\)$", cn)
grepl("\\((.*?)\\)$", cn)
cn[grepl("\\((.*?)\\)$", cn)]
sub("\\((.*?)\\)$", "", cn)
cn
gsub("\\((.*?)\\)$", "", cn)
colnames(data) <- gsub("\\((.*?)\\)$", "", colnames(data))
data
str(data)
as.integer
c(as.integer)
c("층", as.integer)
ㅣㅑㄴㅅ("층", as.integer)
list("층", as.integer)
type <- list()
type["층"] <- as.integer
type[["층"]] <- as.integer
type
type$층()
type[["층"]]
data["층"]
data[, "층"]
data[, "층", with=FALSE]
data[, "층", with=FALSE][1]
data[, "층", with=FALSE][, 1]
data[, "층", with=FALSE][1, ]
data[, "층", with=FALSE][[1]]
data[["층"]]
type[["층"]](data[["층"]])
str(molit.rt.rh)
str(molit.rt.apt)
test <- list("층" = as.integer)
test
test[["층"]]
str(molit.rt.apt)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
data <- molit.rt.apt
data
data$시군구
trim(data$시군구)
as.factor(trim(data$시군구))
test <- as.factor(trim(data$시군구))
grepl("서울", test)
test
str(data)
as.character(data$번지)
str(data)
data$전월세구분
is.na(data$전월세구분)
sum(is.na(data$전월세구분))
is.na(data$전월세구분)
test <- function(x){ as.factor(ifelse(is.na(x), "매매", x)) }
test(data$전월세구분)
str(data)
as.numeric(data$전용면적)
str(data)
gsub(",", "", data$보증금)
as.integer(gsub(",", "", data$보증금))
str(data)
as.integer(gsub(",", "", data$보증금))
as.integer(gsub(",", "", data$보증금)) == 0
sum(as.integer(gsub(",", "", data$보증금)) == 0)
sum(as.integer(gsub(",", "", data$보증금)) == 0, na.rm = T)
sum(as.integer(gsub(",", "", data$보증금)) == 0)
str(data)
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
convertMoneyToInteger(data$보증금)
convertMoneyToInteger(data$보증금)
convertMoneyToInteger(data$보증금) == 0
replace
test <- c(1, 2, 3)
replace(test, 2, NA)
str(data)
data$도로명
str(ata)
str(data)
as.factor(c("1", "2", "3"))
a = as.factor(c("1", "2", "3"))
b = as.factor(c("1", "2", "3"))
a == b
b = as.factor(c(1, 2, 3))
a == b
convertMoneyToInteger
convertMoneyToInteger(data$거래금액)
convertMoneyToInteger(data$거래금액) == 0
sum(convertMoneyToInteger(data$거래금액) == 0, na.rm = T)
data <- molit.rt.rh
str(data
)
colnames(data) <- gsub("\\((.*?)\\)$", "", colnames(data))
str(data)
data$대지권면적
str(data$대지권면적)
summary(data$대지권면적)
unique(data$대지권면적)
str(data)
data <- molit.rt.sh
colnames(data) <- gsub("\\((.*?)\\)$", "", colnames(data))
str(data)
data$주택유형
unique(data$주택유형)
as.factor(data$주택유형)
str(data)
data$연면적
unique(data$연면적)
str(data)
unique(data$대지면적)
str(data)
molit.rt.apt
str(molit.rt.apt)
data("data/molit.rt.apt")
data("data/molit.rt.apt.rda")
data("molit.rt.apt")
molit.rt.apt
data <- molit.rt.apt
types <- list(
"시군구" = function(x){ as.factor(trim(x)) },
"전용면적" = as.numeric,
"대지권면적" = as.numeric,
"연면적" = as.numeric,
"대지면적" = as.numeric,
"계약면적" = as.numeric,
"주택유형" = as.factor,
"계약년" = as.integer,
"계약월" = as.integer,
"계약일" = as.factor,
"전월세구분" = function(x){ as.factor(ifelse(is.na(x), "매매", x)) },
"거래금액" = convertMoneyToInteger,
"보증금" = convertMoneyToInteger,
"월세" = function(x){ replace(convertMoneyToInteger(x), 0, NA) },
"층" = as.integer,
"건축년도" = as.integer,
"도로명" = as.factor
)
colnames(data)
colnames(data) <- gsub("\\((.*?)\\)$", "", colnames(data))
colnames(data)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
data
str(data)
str(data)
colnames(data)
types
colnames(data)[1]
types[[colnames(data)[1]]]
types[["xxx"]]
a <- "시군구"
types[[a]]
types[[a]](data[[a]])
x <- "test"
data[, x := 1]
data
data[, get(x) := 1]
data
data[, eval(x) := 1]
data
a
data[[a]]
data
a
b = "거래금액"
data[[b]]
unique(data[[b]])
molit.rt.cleaningColumnType <- function(data){
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
colConvertors <- list(
"시군구" = function(x){ as.factor(trim(x)) },
"전용면적" = as.numeric,
"대지권면적" = as.numeric,
"연면적" = as.numeric,
"대지면적" = as.numeric,
"계약면적" = as.numeric,
"주택유형" = as.factor,
"계약년" = as.integer,
"계약월" = as.integer,
"계약일" = as.factor,
"전월세구분" = function(x){ as.factor(ifelse(is.na(x), "매매", x)) },
"거래금액" = convertMoneyToInteger,
"보증금" = convertMoneyToInteger,
"월세" = function(x){ replace(convertMoneyToInteger(x), 0, NA) },
"층" = as.integer,
"건축년도" = as.integer,
"도로명" = as.factor
)
for(col in colnames(data)){
if(!is.null(colConvertors[[col]])){
data[, eval(col) := colConvertors[[col]](data[[col]])]
}
}
data
}
data(molit.rt.rh)
data <- molit.rt.rh
data
str(data)
molit.rt.cleaningColumnType(data)
data
str(data)
result <- molit.rt.cleaningColumnType(data)
str(result)
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToRHData()
molit.data.convertToSHData()
document()
library(devtools)
install()
molit.rt.apt
str(molit.rt.apt)
str(molit.rt.rh)
str(molit.rt.sh)
data("molit.rt.apt")
molit.rt.apt
stR(molit.rt.apt)
str(molit.rt.apt)
library(budongsan)
molit.rt.rh
str(molit.rt.rh)
library(data.table)
str(molit.rt.rh)
molit.rt.rh
library(data.table)
molit.rt.rh
molit.rt.apt
class(molit.rt.apt)
str(molit.rt.apt)
document()
library(roxygen2)
library(devtools)
document()
install()
library(budongsan)
?molit.rt.apt
document()
document()
install()
library(budongsan)
?molit.rt.apt
library(budongsan)
?molit.rt.apt
detach("package:budongsan", unload=TRUE)
molit.rt.apt
library(budongsan)
molit.rt.apt
?molit.rt.apt
document()
document()
document()
install()
?molit.rt.apt
library(budongsan)
?molit.rt.apt
remove.packages(budongsan)
remove.packages(budongsan)
document()
library(roxygen2)
library(devtools)
document()
install()
?molit.rt.apt
molit.rt.apt
str(molit.rt.apt)
?molit.rt.apt
docuemnt()
document()
install()
document()
install()
?molit.rt.apt
?molit.rt.apt
?molit.rt.apt
library(budongsan)
molit.rt.apt
library(data.table)
str(molit.rt.apt)
molit.rt.apt$계약일
unique(molit.rt.apt$계약일)
str(molit.rt.apt)
document()
library(roxygen2)
library(data.table)
document()
document()
library(devtools)
document()
install()
document()
install()
library(budongsan)
molit.rt.apt
library(readxl)
library(stringr)
library(data.table)
?read_excel
Sys.getlocale()
Encoding("매매")
Encoding("매매") <- "UTF-8"
a <- "매매"
Encoding(a)
Encoding(a) <- "UTF-8"
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToData <- function(type, pathPrefix = "data-raw/molit/monthly/"){
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result <- molit.rt.cleaningColumnType(result)
objectName <- paste0("molit.rt.", type)
cat("save to", objectName, "object")
assign(objectName, result)
savePath <- paste0("data/", objectName, ".rda")
save(list=objectName, file = savePath)
}
type <- "apt"
pathPrefix = "data-raw/molit/monthly/"
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
data <- result
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
data
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
data$전월세구분
Encoding(data$전월세구분)
unique(Encoding(data$전월세구분))
Encoding(data$전월세구분) <- "UTF-8"
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToRHData
molit.data.convertToRHData()
buildAllData()
remove.packages("budongsan")
