data
str(data)
molit.rt.cleaningColumnType(data)
data
str(data)
result <- molit.rt.cleaningColumnType(data)
str(result)
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToRHData()
molit.data.convertToSHData()
document()
library(devtools)
install()
molit.rt.apt
str(molit.rt.apt)
str(molit.rt.rh)
str(molit.rt.sh)
data("molit.rt.apt")
molit.rt.apt
stR(molit.rt.apt)
str(molit.rt.apt)
library(budongsan)
molit.rt.rh
str(molit.rt.rh)
library(data.table)
str(molit.rt.rh)
molit.rt.rh
library(data.table)
molit.rt.rh
molit.rt.apt
class(molit.rt.apt)
str(molit.rt.apt)
document()
library(roxygen2)
library(devtools)
document()
install()
library(budongsan)
?molit.rt.apt
document()
document()
install()
library(budongsan)
?molit.rt.apt
library(budongsan)
?molit.rt.apt
detach("package:budongsan", unload=TRUE)
molit.rt.apt
library(budongsan)
molit.rt.apt
?molit.rt.apt
document()
document()
document()
install()
?molit.rt.apt
library(budongsan)
?molit.rt.apt
remove.packages(budongsan)
remove.packages(budongsan)
document()
library(roxygen2)
library(devtools)
document()
install()
?molit.rt.apt
molit.rt.apt
str(molit.rt.apt)
?molit.rt.apt
docuemnt()
document()
install()
document()
install()
?molit.rt.apt
?molit.rt.apt
?molit.rt.apt
library(budongsan)
molit.rt.apt
library(data.table)
str(molit.rt.apt)
molit.rt.apt$계약일
unique(molit.rt.apt$계약일)
str(molit.rt.apt)
document()
library(roxygen2)
library(data.table)
document()
document()
library(devtools)
document()
install()
document()
install()
library(budongsan)
molit.rt.apt
library(readxl)
library(stringr)
library(data.table)
?read_excel
Sys.getlocale()
Encoding("매매")
Encoding("매매") <- "UTF-8"
a <- "매매"
Encoding(a)
Encoding(a) <- "UTF-8"
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToData <- function(type, pathPrefix = "data-raw/molit/monthly/"){
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result <- molit.rt.cleaningColumnType(result)
objectName <- paste0("molit.rt.", type)
cat("save to", objectName, "object")
assign(objectName, result)
savePath <- paste0("data/", objectName, ".rda")
save(list=objectName, file = savePath)
}
type <- "apt"
pathPrefix = "data-raw/molit/monthly/"
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
data <- result
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
data
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
data$전월세구분
Encoding(data$전월세구분)
unique(Encoding(data$전월세구분))
Encoding(data$전월세구분) <- "UTF-8"
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
molit.data.convertToRHData
molit.data.convertToRHData()
buildAllData()
remove.packages("budongsan")
buildAllData()
source("data-raw/molit.monthly.R")
buildAllData <- function(){
molit.data.convertAllRTData()
}
buildAllData()
library(roxygen2)
library(devtools)
document()
install()
result
molit.rt.rh
colnames(molit.rt.rh)
Encoding(colnames(molit.rt.rh))
molit.rt.cleaningColumnType <- function(data){
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
Encoding(colnames(data)) <- "UTF-8"
colConvertors <- list(
"시군구" = function(x){ as.factor(trim(x)) },
"전용면적" = as.numeric,
"대지권면적" = as.numeric,
"연면적" = as.numeric,
"대지면적" = as.numeric,
"계약면적" = as.numeric,
"주택유형" = as.factor,
"계약년" = as.integer,
"계약월" = as.integer,
"계약일" = as.factor,
"전월세구분" = function(x){
x <- ifelse(is.na(x), "매매", x)
Encoding(x) <- "UTF-8"
as.factor(x)
},
"거래금액" = convertMoneyToInteger,
"보증금" = convertMoneyToInteger,
"월세" = function(x){ replace(convertMoneyToInteger(x), 0, NA) },
"층" = as.integer,
"건축년도" = as.integer,
"도로명" = as.factor
)
for(col in colnames(data)){
if(!is.null(colConvertors[[col]])){
data[, eval(col) := colConvertors[[col]](data[[col]])]
}
}
data
}
molit.rt.cleaningColumnType(molit.rt.apt)
molit.rt.cleaningColumnType(molit.rt.apt)
function (x, value)
.Internal(setEncoding(x, value))
.Internal(setEncoding(x, value))
library(budongsan)
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
type = "apt"
pathPrefix = "data-raw/molit/monthly/"
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
result <- molit.rt.cleaningColumnType(result)
colnames(result)
Encoding(colnames(result))
data <- result
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
Encoding(colnames(data)) <- "UTF-8"
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(Encoding(colnames(data)) <- "UTF-8")
cn <- colnames(data)
Encoding(cn) <- "UTF-8"
Encoding(cn)
cn <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
cn
Encoding(cn) <- "UTF-8"
colnames(data) <- cn
Encoding(colnames(data))
Encoding(cn)
cn
colnames(data)
colnames(data) <- cn
Encoding(colnames(data))
data <- result
colnames(result)
colnames(data)
data <- molit.rt.apt
Encoding(colnames(data))
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
cn <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
Encoding(cn) <- "UTF-8"
colnames(data) <- cn
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
colnames(result)
cn <- colnames(result)
Encoding(cn)
Encoding(cn) == "unkown"
Encoding(cn) == "unknown"
cn[Encoding(cn) == "unknown"]
result$하하 <- a
cn[Encoding(cn) == "unknown"]
result
result[["호호"]] <- "ㅁ"
ㄱesult
result
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData[["계약년"]] <- year
sheetData[["계약월"]] <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
colnames(result)
Encoding(colnames(result))
Encoding(colnames(result)) == "unkown"
Encoding(colnames(result)) == "unkown"
Encoding(colnames(result)) == "unknown"
colnames(result)[Encoding(colnames(result)) == "unknown"]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData[["계약년"]] <- year
sheetData[["계약월"]] <- month
result <- rbind(result, sheetData, fill=T)
}
}
Encoding(colnames(result))
buildAllData()
View(molit.data.convertAllRTData)
View(molit.data.convertToAPTData)
View(molit.data.convertToData)
buildAllData()
buildAllData()
View(molit.data.convertToData)
View(molit.data.convertToAPTData)
View(molit.data.convertToData)
View(molit.data.convertToData)
View(molit.data.convertToData)
buildAllData()
library(roxygen2)
library(devtools)
document()
install()
library(budongsan)
?molit.rt.apt
molit.rt.apt
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
data("molit.rt.apt")
Encoding(colnames(molit.rt.apt))
molit.rt.apt
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) <- "UTF-8"
Encoding(colnames(molit.rt.apt))
library(budongsan)
?budongsan
View(buildAllData)
buildAllData()
result
result
document()
library(devtools)
library(roxygen2)
document()
remove.packages("budongsan")
install()
molit.rt.apt
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) <- "UTF-8"
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) == "unknown"
colnames(molit.rt.apt)[Encoding(colnames(molit.rt.apt)) == "unknown"]
cn
cn <- colnames(molit.rt.apt)
cn
Encoding(cn) <- "UTF-8"
cn
Encoding(cn)
Encoding(cn)
colnames(molit.rt.apt) <- cn
Encoding(colnames(molit.rt.apt))
data <- data.table()
data$하하하 <- 1
data <- data.table(a = 1)
data$하하하 <- 1
colnames(data)
Encoding(colnames(data))
data[["호호"]] <- 2
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
?enc2utf8
enc2utf8(colnames(data))
Encoding(data)
data
Encoding(colnames(data))
Encoding(data)
enc2utf8(data)
colnames(data) <- enc2utf8(colnames(data))
Encoding(colnames(data))
options(encoding="utf-8")
a <- data.table("하하" = 1)
Encoding(colnames(a))
buildAllData()
library(roxygen2)
library(devtools)
document()
install()
colnames(molit.rt.rh)
Encoding(colnames(molit.rt.rh))
data(molit.rt.rh)
Encoding(colnames(molit.rt.rh))
Encoding(colnames(molit.rt.rh)) == "unknown"
colnames(molit.rt.rh)[Encoding(colnames(molit.rt.rh)) == "unknown"
]
data <- molit.rt.rh
data
data[["하하"]]
Encoding(colnames(data))
options(encoding="utf-8")
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
load("data/molit.rt.apt.rda")
Encoding(colnames(molit.rt.apt))
data <- molit.rt.apt
Encoding(colnames(data)) <- 'latin'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin1'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'UTF-8'
Encoding(colnames(data))
data
Encoding(colnames(data))
Encoding(colnames(data))
data("molit.rt.apt")
data <- data("molit.rt.apt")
Encoding(colnames(data))
data <- molit.rt.apt
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data)) <- 'utf-8'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin1'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'UTF-8'
Encoding(colnames(data))
Encoding(colnames(data))
data <- data("molit.rt.apt")
data <- molit.rt.apt
Encoding(colnames(data))
Encoding(colnames(data)) == "unkown"
Encoding(colnames(data)) == "unknown"
colnames(Encoding(colnames(data)) == "unknown")
colnames(data)[Encoding(colnames(data)) == "unknown"]
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"]) <- UTF-8
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"])
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"]) <- "UTF-8"
Encoding(colnames(data))
?Encoding
Encoding(colnames(data)) <- "bytes"
Encoding(colnames(data))
Encoding(colnames(data)) <- "bytes"
enc2utf8(Encoding(colnames(data)))
