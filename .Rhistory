}
molit.rt.cleaningColumnType(molit.rt.apt)
molit.rt.cleaningColumnType(molit.rt.apt)
function (x, value)
.Internal(setEncoding(x, value))
.Internal(setEncoding(x, value))
library(budongsan)
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
type = "apt"
pathPrefix = "data-raw/molit/monthly/"
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
filePrefix <- paste0(year, month)
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
result <- molit.rt.cleaningColumnType(result)
colnames(result)
Encoding(colnames(result))
data <- result
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
colnames(data) <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
Encoding(colnames(data)) <- "UTF-8"
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(Encoding(colnames(data)) <- "UTF-8")
cn <- colnames(data)
Encoding(cn) <- "UTF-8"
Encoding(cn)
cn <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
cn
Encoding(cn) <- "UTF-8"
colnames(data) <- cn
Encoding(colnames(data))
Encoding(cn)
cn
colnames(data)
colnames(data) <- cn
Encoding(colnames(data))
data <- result
colnames(result)
colnames(data)
data <- molit.rt.apt
Encoding(colnames(data))
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
convertMoneyToInteger <- function(x){ as.integer(gsub(",", "", x)) }
cn <- trim(gsub("\\((.*?)\\)$", "", colnames(data)))
Encoding(cn) <- "UTF-8"
colnames(data) <- cn
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData$계약년 <- year
sheetData$계약월 <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
colnames(result)
cn <- colnames(result)
Encoding(cn)
Encoding(cn) == "unkown"
Encoding(cn) == "unknown"
cn[Encoding(cn) == "unknown"]
result$하하 <- a
cn[Encoding(cn) == "unknown"]
result
result[["호호"]] <- "ㅁ"
ㄱesult
result
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData[["계약년"]] <- year
sheetData[["계약월"]] <- month
result <- rbind(result, sheetData, fill=T)
}
}
result
colnames(result)
Encoding(colnames(result))
Encoding(colnames(result)) == "unkown"
Encoding(colnames(result)) == "unkown"
Encoding(colnames(result)) == "unknown"
colnames(result)[Encoding(colnames(result)) == "unknown"]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "file...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData[["계약년"]] <- year
sheetData[["계약월"]] <- month
result <- rbind(result, sheetData, fill=T)
}
}
Encoding(colnames(result))
buildAllData()
View(molit.data.convertAllRTData)
View(molit.data.convertToAPTData)
View(molit.data.convertToData)
buildAllData()
buildAllData()
View(molit.data.convertToData)
View(molit.data.convertToAPTData)
View(molit.data.convertToData)
View(molit.data.convertToData)
View(molit.data.convertToData)
buildAllData()
library(roxygen2)
library(devtools)
document()
install()
library(budongsan)
?molit.rt.apt
molit.rt.apt
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
data("molit.rt.apt")
Encoding(colnames(molit.rt.apt))
molit.rt.apt
colnames(molit.rt.apt)
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) <- "UTF-8"
Encoding(colnames(molit.rt.apt))
library(budongsan)
?budongsan
View(buildAllData)
buildAllData()
result
result
document()
library(devtools)
library(roxygen2)
document()
remove.packages("budongsan")
install()
molit.rt.apt
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) <- "UTF-8"
Encoding(colnames(molit.rt.apt))
Encoding(colnames(molit.rt.apt)) == "unknown"
colnames(molit.rt.apt)[Encoding(colnames(molit.rt.apt)) == "unknown"]
cn
cn <- colnames(molit.rt.apt)
cn
Encoding(cn) <- "UTF-8"
cn
Encoding(cn)
Encoding(cn)
colnames(molit.rt.apt) <- cn
Encoding(colnames(molit.rt.apt))
data <- data.table()
data$하하하 <- 1
data <- data.table(a = 1)
data$하하하 <- 1
colnames(data)
Encoding(colnames(data))
data[["호호"]] <- 2
colnames(data)
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
?enc2utf8
enc2utf8(colnames(data))
Encoding(data)
data
Encoding(colnames(data))
Encoding(data)
enc2utf8(data)
colnames(data) <- enc2utf8(colnames(data))
Encoding(colnames(data))
options(encoding="utf-8")
a <- data.table("하하" = 1)
Encoding(colnames(a))
buildAllData()
library(roxygen2)
library(devtools)
document()
install()
colnames(molit.rt.rh)
Encoding(colnames(molit.rt.rh))
data(molit.rt.rh)
Encoding(colnames(molit.rt.rh))
Encoding(colnames(molit.rt.rh)) == "unknown"
colnames(molit.rt.rh)[Encoding(colnames(molit.rt.rh)) == "unknown"
]
data <- molit.rt.rh
data
data[["하하"]]
Encoding(colnames(data))
options(encoding="utf-8")
source("data-raw/molit.monthly.R")
molit.data.convertToAPTData()
load("data/molit.rt.apt.rda")
Encoding(colnames(molit.rt.apt))
data <- molit.rt.apt
Encoding(colnames(data)) <- 'latin'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin1'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'UTF-8'
Encoding(colnames(data))
data
Encoding(colnames(data))
Encoding(colnames(data))
data("molit.rt.apt")
data <- data("molit.rt.apt")
Encoding(colnames(data))
data <- molit.rt.apt
Encoding(colnames(data))
Encoding(colnames(data)) <- "UTF-8"
Encoding(colnames(data))
Encoding(colnames(data)) <- 'utf-8'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'latin1'
Encoding(colnames(data))
Encoding(colnames(data)) <- 'UTF-8'
Encoding(colnames(data))
Encoding(colnames(data))
data <- data("molit.rt.apt")
data <- molit.rt.apt
Encoding(colnames(data))
Encoding(colnames(data)) == "unkown"
Encoding(colnames(data)) == "unknown"
colnames(Encoding(colnames(data)) == "unknown")
colnames(data)[Encoding(colnames(data)) == "unknown"]
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"]) <- UTF-8
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"])
Encoding(colnames(data)[Encoding(colnames(data)) == "unknown"]) <- "UTF-8"
Encoding(colnames(data))
?Encoding
Encoding(colnames(data)) <- "bytes"
Encoding(colnames(data))
Encoding(colnames(data)) <- "bytes"
enc2utf8(Encoding(colnames(data)))
library(httr)
library(XML)
result <- GET("http://openapi.kab.co.kr/OpenAPI_ToolInstallPackage/service/rest/RealTradingPriceIndexSvc?_wadl&type=xml")
result
content(result, "json")
content(result, "parsed")
installed.packages("xml2")
install.packages("XML2")
install.packages("xml2")
library(xml2)
content(result, "parsed")
data <- content(result, "parsed")
data
BmgIpb5MF7EqnGzs8kKEaBMmVsmIpFI2uKkAbvDpyEpZEQmBdbfub5kbEDl2OU6duiLJEWGt%2FXUpkNPanozOGQ%3D%3D
get
setClass(
"APIMolitAPTTrade",
contains = "APIBase"
)
#' @import httr
setClass(
"APIBase",
slots = c(
host = "character",
path = "character",
token = "character"
),
prototype = list(
host = NULL,
path = NULL,
token = NULL
)
)
setGeneric("getData", function(obj, ...){ standardGeneric("getData") })
setClass(
"APIMolitAPTTrade",
contains = "APIBase"
)
#' @import jsonlite
setClass(
"APIMolit",
slots = c(
regionCode = "character",
year = "character",
month = "character"
),
prototype = list(
host = "http://openapi.molit.go.kr:8081",
path = "/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade"
),
contains = "APIBase"
)
setMethod("getData", "APIMolit", function(obj){
query = paste0("LAWD_CD=", obj@regionCode, "&DEAL_YMD=", obj@year, obj@month)
url <- paste0(obj@host, obj@path, "?", params, "&serviceKey=", obj@token)
url
})
APIMolit()
api <- new("APIMolit", token = "BmgIpb5MF7EqnGzs8kKEaBMmVsmIpFI2uKkAbvDpyEpZEQmBdbfub5kbEDl2OU6duiLJEWGt")
api
getData(api)
#' @import jsonlite
setClass(
"APIMolit",
slots = c(
regionCode = "character",
year = "character",
month = "character"
),
prototype = list(
host = "http://openapi.molit.go.kr:8081",
path = "/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade"
),
contains = "APIBase"
)
setMethod("getData", "APIMolit", function(obj){
query <- paste0("LAWD_CD=", obj@regionCode, "&DEAL_YMD=", obj@year, obj@month)
url <- paste0(obj@host, obj@path, "?", query, "&serviceKey=", obj@token)
url
})
getData(api)
GET(getData(api))
#' @import jsonlite
setClass(
"APIMolit",
slots = c(
regionCode = "character",
year = "character",
month = "character"
),
prototype = list(
host = "http://openapi.molit.go.kr:8081",
path = "/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade"
),
contains = "APIBase"
)
setMethod("getData", "APIMolit", function(obj){
query <- paste0("LAWD_CD=", obj@regionCode, "&DEAL_YMD=", obj@year, obj@month)
url <- paste0(obj@host, obj@path, "?", query, "&serviceKey=", obj@token)
resp <- GET(url)
body <- content(resp, "text")
body
})
result M- getData(api)
result <- getData(api)
result
api
api <- new("APIMolit", token = "BmgIpb5MF7EqnGzs8kKEaBMmVsmIpFI2uKkAbvDpyEpZEQmBdbfub5kbEDl2OU6duiLJEWGt", regionCode="11110", year="2016", month="01")
api
result <- getData(api)
result
jsonlite::serializeJSON(result)
jsonlite::fromJSON(result)
api@year <- "2015"
result <- getData(api)
result <- getData(api)
options(encoding = "utf-8")
result <- getData(api)
result
library(jsonlite)
fromJSON(result)
api@regionCode = "11111"
result <- getData(api)
result
api@regionCode = "11140"
result <- getData(api)
result
library(budongsan)
load("data/molit.rt.rh.rda")
read("data/molit.rt.rh.rda")
data("data/molit.rt.rh.rda")
load("data/molit.rt.sh.rda")
document()
library(devtools)
install()
library(devtools)
library(roxygen2)
document()
install()
library(data.table)
molit.rt.apt
apt(molit.rt.apt)
str(molit.rt.apt)
type = "apt"
pathPrefix = "data-raw/molit/monthly/"
if(!type %in% c("apt", "rh", "sh")) stop(paste(type, "must be one of 'apt', 'rh', 'sh'"))
sourceFiles <- list.files(pathPrefix)
targetFiles <- sourceFiles[grepl(paste0(".", type, "."), sourceFiles)]
result <- data.table()
for(target in targetFiles){
year <- as.integer(substr(target, 1, 4))
month <- as.integer(substr(target, 5, 6))
if(year < 2016) stop(paste(year, "must be greater than 2016, file name:", target))
if(month > 12) stop(paste(month, "must be less than 12, file name:", target))
targetPath <- targetPathes <- paste0(pathPrefix, target)
cat("converting", paste0("'", targetPath, "'"), "...\n")
sheetNames <- excel_sheets(targetPath)
for(sheet in sheetNames){
sheetData <- data.table(read_excel(targetPath, sheet = sheet, skip = 7))
sheetData[["계약년"]] <- year
sheetData[["계약월"]] <- month
result <- rbind(result, sheetData, fill=T)
}
}
source("data-raw/databuilder.R")
buildAllData()
document()
load("data/molit.rt.apt.rda")
str(molit.rt.apt)
library(roxygen2)
library(devtools)
document()
install()
data("molit.rt.rh")
str(molit.rt.rh)
source("data-raw/databuilder.R")
buildAllData()
document()
install()
data(molit.rt.rh)
str(molit.rt.rh)
source("data-raw/databuilder.R")
buildAllData()
document()
install()
data("molit.rt.rh")
str(molit.rt.rh)
molit.rt.apt
str(molit.rt.apt)
data <- molit.rt.apt
data
grepl("성남시", data$시군구)
data[grepl("성남시", data$시군구)]
data <- data[grepl("성남시", data$시군구)]
data$전월세구분 == "매매"
sum(data$전월세구분 == "매매")
data[(data$전월세구분 == "매매")]
data <- data[(data$전월세구분 == "매매")]
summary(data$거래금액)
library(dplyr)
data$전용면적
data$전용면적
data$전용면적 > 55 & data$전용면적 < 80
data[data$전용면적 > 55 & data$전용면적 < 80]
data <- data[data$전용면적 > 55 & data$전용면적 < 80]
data
data %>% group_by(시군구) %>% summaries(mean <- mean(거래금액))
library(dplyr)
install.packages("dplyr")
library(dplyr)
data %>% group_by(시군구) %>% summaries(mean <- mean(거래금액))
data %>% group_by(시군구) %>% summarise(mean <- mean(거래금액))
data
data %>% group_by(시군구)
data %>% group_by(시군구) %>% summarise(mean = mean(거래금액))
result <- data %>% group_by(시군구) %>% summarise(mean = mean(거래금액)) %>% as.data.table()
resut
result
sort(result$mean)
order(result$mean)
result[order(result$mean)]
result <- data %>% group_by(시군구) %>% summarise(mean = median(거래금액)) %>% as.data.table()
result
result[order(result$mean)]
buildAllData()
buildAllData()
